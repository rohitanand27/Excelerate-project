# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZTQMDVLEdvMT8gQ5j1EX-R_sZXWbsaS0
"""

import pandas as pd

df = pd.read_csv('/content/SLU Opportunity Wise Data-1710158595043 - SLU Opportunity Wise Data-1710158595043.csv')

from google.colab import drive
drive.mount('/content/drive')

print(df.info())

print(df.head(10))

print(df.describe())

print("Duplicate Rows:", df.duplicated().sum())

print(df.isnull().sum())

import pandas as pd

# Define df by reading your data
df = pd.read_csv('/SLU_Opportunity_Wise_Data.csv')

# Check for the actual column names in your DataFrame
print(df.columns)

# Assuming the column name is 'Opportunity_Id' instead of 'Opportunity_ID'
# and 'First Name' is actually 'First_Name' (based on KeyError and previous code)
df.dropna(subset=['Opportunity_Id', 'First_Name'], inplace=True)

import pandas as pd

# Define df by reading your data
df = pd.read_csv('/content/SLU Opportunity Wise Data-1710158595043 - SLU Opportunity Wise Data-1710158595043.csv')

# Now you can use df
df.fillna({'First Name': 'Unknown'}, inplace=True)  # Replace missing names
df.fillna({'Country': 'Not Specified'}, inplace=True)

date_columns = [
    "Learner_SignUp_DateTime", "Opportunity_End_Date", "Date_of_Birth",
    "Apply_Date", "Opportunity_Start_Date"
]
for col in date_columns:
    if col in df.columns:
        df[col] = pd.to_datetime(df[col], errors='coerce')

df['Gender'] = df['Gender'].str.strip().str.capitalize()

print(f"Duplicate Rows: {df.duplicated().sum()}")

df.drop_duplicates(inplace=True)

df = df[(df["Date_of_Birth"] >= "1920-01-01") & (df["Date_of_Birth"] <= "2024-01-01")]

# Check if the column exists before filtering
if 'Date_of_Birth' in df.columns:
    # If it does, proceed with filtering
    df = df[(df["Date_of_Birth"] >= "1920-01-01") & (df["Date_of_Birth"] <= "2024-01-01")]
else:
    # Handle the case where the column doesn't exist
    print("Column 'Date_of_Birth' not found in DataFrame. Skipping filtering step.")
    # You can add further logic here, like checking for alternate column names

df.to_csv('/SLU_Opportunity_Wise_Data.csv', index=False)

print("Data cleaning completed and saved as SLU_Cleaned_Data.csv")

print(df.columns)  # Check the actual column names
print(df['Status Code'].unique())
print(df[['Status Code', 'Status Description']].drop_duplicates())

df.columns = df.columns.str.strip().str.replace(' ', '_')

# Check if the column exists before filtering
if 'Date_of_Birth' in df.columns:
    # If it does, proceed with filtering
    df = df[(df["Date_of_Birth"] >= "1920-01-01") & (df["Date_of_Birth"] <= "2024-01-01")]
else:
    # Handle the case where the column doesn't exist
    print("Column 'Date_of_Birth' not found in DataFrame. Skipping filtering step.")
    # You can add further logic here, like checking for alternate column names

print(df['Status_Code'].unique())
print(df[['Status_Code', 'Status_Description']].drop_duplicates())
df['Status_Code'].fillna(0, inplace=True)  # Replace NaN with 0 or another appropriate value

df.dropna(subset=['Status_Code'], inplace=True)
df['Status_Code'] = df['Status_Code'].astype(int)
print(df.info())  # Ensure no missing or incorrectly typed data
print(df.describe())  # Check summary statistics

print("Data cleaning completed and saved as SLU_Cleaned_Data.csv")